/*********************************************************************
  Numexpr - Fast numerical array expression evaluator for NumPy.

      License: MIT
      Author:  See AUTHORS.txt

  See LICENSE.txt for details about copyright and rights to use.
**********************************************************************/

/*
OPCODE(n, enum_name, exported, return_type, arg1_type, arg2_type, arg3_type)

`exported` is NULL if the opcode shouldn't exported by the Python module.

Types are Tb1, Ti4, Ti8, Tf4, Tf8, Tc16, Ts1, Tc8, Tn0, and T0; these symbols should be
#defined to whatever is needed. (T0 is the no-such-arg type.)

*/

// TODO: RAM, write a python script that generates this opcode list programatically

OPCODE(0, OP_NOOP, "noop", T0, T0, T0, T0)

OPCODE(1, OP_COPY_B1B1, "copy_b1b1", Tb1, Tb1, T0, T0)

OPCODE(2, OP_INVERT_B1B1, "invert_b1b1", Tb1, Tb1, T0, T0)
OPCODE(3, OP_AND_B1B1B1, "and_b1b1b1", Tb1, Tb1, Tb1, T0)
OPCODE(4, OP_OR_B1B1B1, "or_b1b1b1", Tb1, Tb1, Tb1, T0)

OPCODE(5, OP_EQ_B1B1B1, "eq_b1b1b1", Tb1, Tb1, Tb1, T0)
OPCODE(6, OP_NE_B1B1B1, "ne_b1b1b1", Tb1, Tb1, Tb1, T0)

OPCODE(7, OP_GT_B1I4I4, "gt_b1i4i4", Tb1, Ti4, Ti4, T0)
OPCODE(8, OP_GE_B1I4I4, "ge_b1i4i4", Tb1, Ti4, Ti4, T0)
OPCODE(9, OP_EQ_B1I4I4, "eq_b1i4i4", Tb1, Ti4, Ti4, T0)
OPCODE(10, OP_NE_B1I4I4, "ne_b1i4i4", Tb1, Ti4, Ti4, T0)

OPCODE(11, OP_GT_B1I8I8, "gt_b1i8i8", Tb1, Ti8, Ti8, T0)
OPCODE(12, OP_GE_B1I8I8, "ge_b1i8i8", Tb1, Ti8, Ti8, T0)
OPCODE(13, OP_EQ_B1I8I8, "eq_b1i8i8", Tb1, Ti8, Ti8, T0)
OPCODE(14, OP_NE_B1I8I8, "ne_b1i8i8", Tb1, Ti8, Ti8, T0)

OPCODE(15, OP_GT_B1F4F4, "gt_b1f4f4", Tb1, Tf4, Tf4, T0)
OPCODE(16, OP_GE_B1F4F4, "ge_b1f4f4", Tb1, Tf4, Tf4, T0)
OPCODE(17, OP_EQ_B1F4F4, "eq_b1f4f4", Tb1, Tf4, Tf4, T0)
OPCODE(18, OP_NE_B1F4F4, "ne_b1f4f4", Tb1, Tf4, Tf4, T0)

OPCODE(19, OP_GT_B1F8F8, "gt_bf8f8", Tb1, Tf8, Tf8, T0)
OPCODE(20, OP_GE_B1F8F8, "ge_bf8f8", Tb1, Tf8, Tf8, T0)
OPCODE(21, OP_EQ_B1F8F8, "eq_bf8f8", Tb1, Tf8, Tf8, T0)
OPCODE(22, OP_NE_B1F8F8, "ne_bf8f8", Tb1, Tf8, Tf8, T0)

OPCODE(23, OP_GT_B1S1S1, "gt_b1s1s1", Tb1, Ts1, Ts1, T0)
OPCODE(24, OP_GE_B1S1S1, "ge_b1s1s1", Tb1, Ts1, Ts1, T0)
OPCODE(25, OP_EQ_B1S1S1, "eq_b1s1s1", Tb1, Ts1, Ts1, T0)
OPCODE(26, OP_NE_B1S1S1, "ne_b1s1s1", Tb1, Ts1, Ts1, T0)

OPCODE(27, OP_CAST_I4B1, "cast_i4b1", Ti4, Tb1, T0, T0)
OPCODE(28, OP_COPY_I4I4, "copy_i4i4", Ti4, Ti4, T0, T0)
OPCODE(29, OP_ONES_LIKE_I4I4, "ones_like_i4i4", Ti4, T0, T0, T0)
OPCODE(30, OP_NEG_I4I4, "neg_i4i4", Ti4, Ti4, T0, T0)
OPCODE(31, OP_ADD_I4I4I4, "add_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(32, OP_SUB_I4I4I4, "sub_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(33, OP_MUL_I4I4I4, "mul_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(34, OP_DIV_I4I4I4, "div_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(35, OP_POW_I4I4I4, "pow_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(36, OP_MOD_I4I4I4, "mod_i4i4i4", Ti4, Ti4, Ti4, T0)

OPCODE(37, OP_LSHIFT_I4I4I4, "lshift_i4i4i4", Ti4, Ti4, Ti4, T0)
OPCODE(38, OP_RSHIFT_I4I4I4, "rshift_i4i4i4", Ti4, Ti4, Ti4, T0)

OPCODE(39, OP_WHERE_I4B1I4I4, "where_i4b1i4i4", Ti4, Tb1, Ti4, Ti4)

OPCODE(40, OP_CAST_I8I4, "cast_i8i4", Ti8, Ti4, T0, T0)
OPCODE(41, OP_DUMMY41, "dummy41", T0, T0, T0, T0 )
// TODO: REPLACE COPY_I8I8

OPCODE(42, OP_ONES_LIKE_I8I8, "ones_like_i8i8", Ti8, T0, T0, T0)
OPCODE(43, OP_NEG_I8I8, "neg_i8i8", Ti8, Ti8, T0, T0)
OPCODE(44, OP_ADD_I8I8I8, "add_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(45, OP_SUB_I8I8I8, "sub_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(46, OP_MUL_I8I8I8, "mul_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(47, OP_DIV_I8I8I8, "div_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(48, OP_POW_I8I8I8, "pow_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(49, OP_MOD_I8I8I8, "mod_i8i8i8", Ti8, Ti8, Ti8, T0)

OPCODE(50, OP_LSHIFT_I8I8I8, "lshift_i8i8i8", Ti8, Ti8, Ti8, T0)
OPCODE(51, OP_RSHIFT_I8I8I8, "rshift_i8i8i8", Ti8, Ti8, Ti8, T0)

OPCODE(52, OP_WHERE_I8B1I8I8, "where_i8b1i8i8", Ti8, Tb1, Ti8, Tf8)

OPCODE(53, OP_CAST_F4I4, "cast_f4i4", Tf4, Ti4, T0, T0)
OPCODE(54, OP_CAST_F4I8, "cast_f4i8", Tf4, Ti8, T0, T0)
OPCODE(55, OP_COPY_F4F4, "copy_f4f4", Tf4, Tf4, T0, T0)
OPCODE(56, OP_ONES_LIKE_F4F4, "ones_like_f4f4", Tf4, T0, T0, T0)
OPCODE(57, OP_NEG_F4F4, "neg_f4f4", Tf4, Tf4, T0, T0)
OPCODE(58, OP_ADD_F4F4F4, "add_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(59, OP_SUB_F4F4F4, "sub_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(60, OP_MUL_F4F4F4, "mul_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(61, OP_DIV_F4F4F4, "div_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(62, OP_POW_F4F4F4, "pow_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(63, OP_MOD_F4F4F4, "mod_f4f4f4", Tf4, Tf4, Tf4, T0)
OPCODE(64, OP_SQRT_F4F4, "sqrt_f4f4", Tf4, Tf4, T0, T0)
OPCODE(65, OP_WHERE_F4B1F4F4, "where_f4b1f4f4", Tf4, Tb1, Tf4, Tf4)
OPCODE(66, OP_FUNC_F4F4N0, "func_f4f4n0", Tf4, Tf4, Tn0, T0)
OPCODE(67, OP_FUNC_F4F4F4N0, "func_f4f4f4n0", Tf4, Tf4, Tf4, Tn0)

OPCODE(68, OP_CAST_F8I4, "cast_f8i4", Tf8, Ti4, T0, T0)
OPCODE(69, OP_CAST_F8I8, "cast_f8i8", Tf8, Ti8, T0, T0)
OPCODE(70, OP_CAST_F8F4, "cast_f8f4", Tf8, Tf4, T0, T0)
OPCODE(71, OP_COPY_F8F8, "copy_f8f8", Tf8, Tf8, T0, T0)
OPCODE(72, OP_ONES_LIKE_F8F8, "ones_like_f8f8", Tf8, T0, T0, T0)
OPCODE(73, OP_NEG_F8F8, "neg_f8f8", Tf8, Tf8, T0, T0)
OPCODE(74, OP_ADD_F8F8F8, "add_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(75, OP_SUB_F8F8F8, "sub_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(76, OP_MUL_F8F8F8, "mul_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(77, OP_DIV_F8F8F8, "div_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(78, OP_POW_F8F8F8, "pow_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(79, OP_MOD_F8F8F8, "mod_f8f8f8", Tf8, Tf8, Tf8, T0)
OPCODE(80, OP_SQRT_F8F8, "sqrt_f8f8", Tf8, Tf8, T0, T0)
OPCODE(81, OP_WHERE_F8B1F8F8, "where_f8b1f8f8", Tf8, Tb1, Tf8, Tf8)
OPCODE(82, OP_FUNC_F8F8N0, "func_f8f8n0", Tf8, Tf8, Tn0, T0)
OPCODE(83, OP_FUNC_F8F8F8N0, "func_f8f8f8n0", Tf8, Tf8, Tf8, Tn0)

OPCODE(84, OP_EQ_B1C16C16, "eq_b1c16c16", Tb1, Tc16, Tc16, T0)
OPCODE(85, OP_NE_B1C16C16, "ne_b1c16c16", Tb1, Tc16, Tc16, T0)

OPCODE(86, OP_CAST_C16I4, "cast_c16i4", Tc16, Ti4, T0, T0)
OPCODE(87, OP_CAST_C16I8, "cast_c16i8", Tc16, Ti8, T0, T0)
OPCODE(88, OP_CAST_C16F4, "cast_c16f4", Tc16, Tf4, T0, T0)
OPCODE(89, OP_CAST_C16F8, "cast_c16f8", Tc16, Tf8, T0, T0)
OPCODE(90, OP_ONES_LIKE_C16C16, "ones_like_c16c16", Tc16, T0, T0, T0)
OPCODE(91, OP_COPY_C16C16, "copy_c16c16", Tc16, Tc16, T0, T0)
OPCODE(92, OP_NEG_C16C16, "neg_c16c16", Tc16, Tc16, T0, T0)
OPCODE(93, OP_ADD_C16C16C16, "add_c16c16c16", Tc16, Tc16, Tc16, T0)
OPCODE(94, OP_SUB_C16C16C16, "sub_c16c16c16", Tc16, Tc16, Tc16, T0)
OPCODE(95, OP_MUL_C16C16C16, "mul_c16c16c16", Tc16, Tc16, Tc16, T0)
OPCODE(96, OP_DIV_C16C16C16, "div_c16c16c16", Tc16, Tc16, Tc16, T0)
OPCODE(97, OP_WHERE_C16B1C16C16, "where_c16b1c16c16", Tc16, Tb1, Tc16, Tc16)
OPCODE(98, OP_FUNC_C16C16N0, "func_c16c16n0", Tc16, Tc16, Tn0, T0)
OPCODE(99, OP_FUNC_C16C16C16N0, "func_c16c16c16n0", Tc16, Tc16, Tc16, Tn0)

OPCODE(100, OP_REAL_F8C16, "real_f8c16", Tf8, Tc16, T0, T0)
OPCODE(101, OP_IMAG_F8C16, "imag_f8c16", Tf8, Tc16, T0, T0)
OPCODE(102, OP_COMPLEX_C16F8F8, "complex_c16f8f8", Tc16, Tf8, Tf8, T0)

// RAM should really have op-codes for gt_bxx, lt_bxx, and 
// gt_bcc, lt_bcc
OPCODE(103, OP_EQ_B1C8C8, "eq_b1c8c8", Tb1, Tc8, Tc8, T0)
OPCODE(104, OP_NE_B1C8C8, "ne_b1c8c8", Tb1, Tc8, Tc8, T0)

OPCODE(105, OP_CAST_C8I4, "cast_c8i4", Tc8, Ti4, T0, T0)
OPCODE(106, OP_CAST_C8I8, "cast_c8i8", Tc8, Ti8, T0, T0)
OPCODE(107, OP_CAST_C8F4, "cast_c8f4", Tc8, Tf4, T0, T0)
OPCODE(108, OP_CAST_C8F8, "cast_c8f8", Tc8, Tf8, T0, T0)
OPCODE(109, OP_ONES_LIKE_C8C8, "ones_like_c8c8", Tc8, T0, T0, T0)
OPCODE(110, OP_COPY_C8C8, "copy_c8c8", Tc8, Tc8, T0, T0)
OPCODE(111, OP_NEG_C8C8, "neg_c8c8", Tc8, Tc8, T0, T0)
OPCODE(112, OP_ADD_C8C8C8, "add_c8c8c8", Tc8, Tc8, Tc8, T0)
OPCODE(113, OP_SUB_C8C8C8, "sub_c8c8c8", Tc8, Tc8, Tc8, T0)
OPCODE(114, OP_MUL_C8C8C8, "mul_c8c8c8", Tc8, Tc8, Tc8, T0)
OPCODE(115, OP_DIV_C8C8C8, "div_c8c8c8", Tc8, Tc8, Tc8, T0)
OPCODE(116, OP_WHERE_C8B1C8C8, "where_c8bc8c8", Tc8, Tb1, Tc8, Tc8)
OPCODE(117, OP_FUNC_C8C8N0, "func_c8c8n0", Tc8, Tc8, Tn0, T0)
OPCODE(118, OP_FUNC_C8C8C8N0, "func_c8c8c8n0", Tc8, Tc8, Tc8, Tn0)

OPCODE(119, OP_REAL_F4C8, "real_f4c8", Tf4, Tc8, T0, T0)
OPCODE(120, OP_IMAG_F4C8, "imag_f4c8", Tf4, Tc8, T0, T0)
OPCODE(121, OP_COMPLEX_C8F4F4, "complex_c8f4f4", Tc8, Tf8, Tf8, T0)

OPCODE(122, OP_COPY_S1S1, "copy_s1s1", Ts1, Ts1, T0, T0)

OPCODE(123, OP_WHERE_B1B1B1B1, "where_b1b1b1b1", Tb1, Tb1, Tb1, Tb1)

OPCODE(124, OP_CONTAINS_B1S1S1, "contains_bss", Tb1, Ts1, Ts1, T0)

OPCODE(125, OP_REDUCTION, NULL, T0, T0, T0, T0)

/* Last argument in a reduction is the axis of the array the
   reduction should be applied along. */

OPCODE(126, OP_SUM, NULL, T0, T0, T0, T0)
OPCODE(127, OP_SUM_I4I4N0, "sum_i4i4n0", Ti4, Ti4, Tn0, T0)
OPCODE(128, OP_SUM_I8I8N0, "sum_i8i8n0", Ti8, Ti8, Tn0, T0)
OPCODE(129, OP_SUM_F4F4N0, "sum_f4f4n0", Tf4, Tf4, Tn0, T0)
OPCODE(130, OP_SUM_F8F8N0, "sum_f8f8n0", Tf8, Tf8, Tn0, T0)
OPCODE(131, OP_SUM_C16C16N0, "sum_c16c16n0", Tc16, Tc16, Tn0, T0)
OPCODE(132, OP_SUM_C8C8N0, "sum_c8c8n0", Tc8, Tc8, Tn0, T0)

OPCODE(133, OP_PROD, NULL, T0, T0, T0, T0)
OPCODE(134, OP_PROD_I4I4N0, "prod_i4i4n0", Ti4, Ti4, Tn0, T0)
OPCODE(135, OP_PROD_I8I8N0, "prod_i8i8n0", Ti8, Ti8, Tn0, T0)
OPCODE(136, OP_PROD_F4F4N0, "prod_f4f4n0", Tf4, Tf4, Tn0, T0)
OPCODE(137, OP_PROD_F8F8N0, "prod_f8f8n0", Tf8, Tf8, Tn0, T0)
OPCODE(138, OP_PROD_C16C16N0, "prod_c16c16n0", Tc16, Tc16, Tn0, T0)
OPCODE(139, OP_PROD_C8C8N0, "prod_c8c8n0", Tc8, Tc8, Tn0, T0)

// RAM: we also need to add an opcode for complex64->complex128 casting
// it's also asking for conjugate_xx?  How is this done for conjugate_cc?
OPCODE(140, OP_CAST_C8C16, "cast_c8c16", Tc8, Tc16, T0, T0 )

OPCODE(141, OP_DUMMY141, "dummy141", T0, T0, T0, T0 )
OPCODE(142, OP_DUMMY142, "dummy142", T0, T0, T0, T0 )
OPCODE(143, OP_DUMMY143, "dummy143", T0, T0, T0, T0 )
OPCODE(144, OP_DUMMY144, "dummy144", T0, T0, T0, T0 )
OPCODE(145, OP_DUMMY145, "dummy145", T0, T0, T0, T0 )
OPCODE(146, OP_DUMMY146, "dummy146", T0, T0, T0, T0 )
OPCODE(147, OP_DUMMY147, "dummy147", T0, T0, T0, T0 )
OPCODE(148, OP_DUMMY148, "dummy148", T0, T0, T0, T0 )
OPCODE(149, OP_DUMMY149, "dummy149", T0, T0, T0, T0 )
OPCODE(150, OP_DUMMY150, "dummy150", T0, T0, T0, T0 )
OPCODE(151, OP_DUMMY151, "dummy151", T0, T0, T0, T0 )
OPCODE(152, OP_DUMMY152, "dummy152", T0, T0, T0, T0 )
OPCODE(153, OP_DUMMY153, "dummy153", T0, T0, T0, T0 )
OPCODE(154, OP_DUMMY154, "dummy154", T0, T0, T0, T0 )
OPCODE(155, OP_DUMMY155, "dummy155", T0, T0, T0, T0 )
OPCODE(156, OP_DUMMY156, "dummy156", T0, T0, T0, T0 )
OPCODE(157, OP_DUMMY157, "dummy157", T0, T0, T0, T0 )
OPCODE(158, OP_DUMMY158, "dummy158", T0, T0, T0, T0 )
OPCODE(159, OP_DUMMY159, "dummy159", T0, T0, T0, T0 )
OPCODE(160, OP_DUMMY160, "dummy160", T0, T0, T0, T0 )
OPCODE(161, OP_DUMMY161, "dummy161", T0, T0, T0, T0 )
OPCODE(162, OP_DUMMY162, "dummy162", T0, T0, T0, T0 )
OPCODE(163, OP_DUMMY163, "dummy163", T0, T0, T0, T0 )
OPCODE(164, OP_DUMMY164, "dummy164", T0, T0, T0, T0 )
OPCODE(165, OP_DUMMY165, "dummy165", T0, T0, T0, T0 )
OPCODE(166, OP_DUMMY166, "dummy166", T0, T0, T0, T0 )
OPCODE(167, OP_DUMMY167, "dummy167", T0, T0, T0, T0 )
OPCODE(168, OP_DUMMY168, "dummy168", T0, T0, T0, T0 )
OPCODE(169, OP_DUMMY169, "dummy169", T0, T0, T0, T0 )
OPCODE(170, OP_DUMMY170, "dummy170", T0, T0, T0, T0 )
OPCODE(171, OP_DUMMY171, "dummy171", T0, T0, T0, T0 )
OPCODE(172, OP_DUMMY172, "dummy172", T0, T0, T0, T0 )
OPCODE(173, OP_DUMMY173, "dummy173", T0, T0, T0, T0 )
OPCODE(174, OP_DUMMY174, "dummy174", T0, T0, T0, T0 )
OPCODE(175, OP_DUMMY175, "dummy175", T0, T0, T0, T0 )
OPCODE(176, OP_DUMMY176, "dummy176", T0, T0, T0, T0 )
OPCODE(177, OP_DUMMY177, "dummy177", T0, T0, T0, T0 )
OPCODE(178, OP_DUMMY178, "dummy178", T0, T0, T0, T0 )
OPCODE(179, OP_DUMMY179, "dummy179", T0, T0, T0, T0 )
OPCODE(180, OP_DUMMY180, "dummy180", T0, T0, T0, T0 )
OPCODE(181, OP_DUMMY181, "dummy181", T0, T0, T0, T0 )
OPCODE(182, OP_DUMMY182, "dummy182", T0, T0, T0, T0 )
OPCODE(183, OP_DUMMY183, "dummy183", T0, T0, T0, T0 )
OPCODE(184, OP_DUMMY184, "dummy184", T0, T0, T0, T0 )
OPCODE(185, OP_DUMMY185, "dummy185", T0, T0, T0, T0 )
OPCODE(186, OP_DUMMY186, "dummy186", T0, T0, T0, T0 )
OPCODE(187, OP_DUMMY187, "dummy187", T0, T0, T0, T0 )
OPCODE(188, OP_DUMMY188, "dummy188", T0, T0, T0, T0 )
OPCODE(189, OP_DUMMY189, "dummy189", T0, T0, T0, T0 )
OPCODE(190, OP_DUMMY190, "dummy190", T0, T0, T0, T0 )
OPCODE(191, OP_DUMMY191, "dummy191", T0, T0, T0, T0 )
OPCODE(192, OP_DUMMY192, "dummy192", T0, T0, T0, T0 )
OPCODE(193, OP_DUMMY193, "dummy193", T0, T0, T0, T0 )
OPCODE(194, OP_DUMMY194, "dummy194", T0, T0, T0, T0 )
OPCODE(195, OP_DUMMY195, "dummy195", T0, T0, T0, T0 )
OPCODE(196, OP_DUMMY196, "dummy196", T0, T0, T0, T0 )
OPCODE(197, OP_DUMMY197, "dummy197", T0, T0, T0, T0 )
OPCODE(198, OP_DUMMY198, "dummy198", T0, T0, T0, T0 )
OPCODE(199, OP_DUMMY199, "dummy199", T0, T0, T0, T0 )
OPCODE(200, OP_DUMMY200, "dummy200", T0, T0, T0, T0 )
OPCODE(201, OP_DUMMY201, "dummy201", T0, T0, T0, T0 )
OPCODE(202, OP_DUMMY202, "dummy202", T0, T0, T0, T0 )
OPCODE(203, OP_DUMMY203, "dummy203", T0, T0, T0, T0 )
OPCODE(204, OP_DUMMY204, "dummy204", T0, T0, T0, T0 )
OPCODE(205, OP_DUMMY205, "dummy205", T0, T0, T0, T0 )
OPCODE(206, OP_DUMMY206, "dummy206", T0, T0, T0, T0 )
OPCODE(207, OP_DUMMY207, "dummy207", T0, T0, T0, T0 )
OPCODE(208, OP_DUMMY208, "dummy208", T0, T0, T0, T0 )
OPCODE(209, OP_DUMMY209, "dummy209", T0, T0, T0, T0 )
OPCODE(210, OP_DUMMY210, "dummy210", T0, T0, T0, T0 )
OPCODE(211, OP_DUMMY211, "dummy211", T0, T0, T0, T0 )
OPCODE(212, OP_DUMMY212, "dummy212", T0, T0, T0, T0 )
OPCODE(213, OP_DUMMY213, "dummy213", T0, T0, T0, T0 )
OPCODE(214, OP_DUMMY214, "dummy214", T0, T0, T0, T0 )
OPCODE(215, OP_DUMMY215, "dummy215", T0, T0, T0, T0 )
OPCODE(216, OP_DUMMY216, "dummy216", T0, T0, T0, T0 )
OPCODE(217, OP_DUMMY217, "dummy217", T0, T0, T0, T0 )
OPCODE(218, OP_DUMMY218, "dummy218", T0, T0, T0, T0 )
OPCODE(219, OP_DUMMY219, "dummy219", T0, T0, T0, T0 )
OPCODE(220, OP_DUMMY220, "dummy220", T0, T0, T0, T0 )
OPCODE(221, OP_DUMMY221, "dummy221", T0, T0, T0, T0 )
OPCODE(222, OP_DUMMY222, "dummy222", T0, T0, T0, T0 )
OPCODE(223, OP_DUMMY223, "dummy223", T0, T0, T0, T0 )
OPCODE(224, OP_DUMMY224, "dummy224", T0, T0, T0, T0 )
OPCODE(225, OP_DUMMY225, "dummy225", T0, T0, T0, T0 )
OPCODE(226, OP_DUMMY226, "dummy226", T0, T0, T0, T0 )
OPCODE(227, OP_DUMMY227, "dummy227", T0, T0, T0, T0 )
OPCODE(228, OP_DUMMY228, "dummy228", T0, T0, T0, T0 )
OPCODE(229, OP_DUMMY229, "dummy229", T0, T0, T0, T0 )
OPCODE(230, OP_DUMMY230, "dummy230", T0, T0, T0, T0 )
OPCODE(231, OP_DUMMY231, "dummy231", T0, T0, T0, T0 )
OPCODE(232, OP_DUMMY232, "dummy232", T0, T0, T0, T0 )
OPCODE(233, OP_DUMMY233, "dummy233", T0, T0, T0, T0 )
OPCODE(234, OP_DUMMY234, "dummy234", T0, T0, T0, T0 )
OPCODE(235, OP_DUMMY235, "dummy235", T0, T0, T0, T0 )
OPCODE(236, OP_DUMMY236, "dummy236", T0, T0, T0, T0 )
OPCODE(237, OP_DUMMY237, "dummy237", T0, T0, T0, T0 )
OPCODE(238, OP_DUMMY238, "dummy238", T0, T0, T0, T0 )
OPCODE(239, OP_DUMMY239, "dummy239", T0, T0, T0, T0 )
OPCODE(240, OP_DUMMY240, "dummy240", T0, T0, T0, T0 )
OPCODE(241, OP_DUMMY241, "dummy241", T0, T0, T0, T0 )
OPCODE(242, OP_DUMMY242, "dummy242", T0, T0, T0, T0 )
OPCODE(243, OP_DUMMY243, "dummy243", T0, T0, T0, T0 )
OPCODE(244, OP_DUMMY244, "dummy244", T0, T0, T0, T0 )
OPCODE(245, OP_DUMMY245, "dummy245", T0, T0, T0, T0 )
OPCODE(246, OP_DUMMY246, "dummy246", T0, T0, T0, T0 )
OPCODE(247, OP_DUMMY247, "dummy247", T0, T0, T0, T0 )
OPCODE(248, OP_DUMMY248, "dummy248", T0, T0, T0, T0 )
OPCODE(249, OP_DUMMY249, "dummy249", T0, T0, T0, T0 )
OPCODE(250, OP_DUMMY250, "dummy250", T0, T0, T0, T0 )
OPCODE(251, OP_DUMMY251, "dummy251", T0, T0, T0, T0 )
OPCODE(252, OP_DUMMY252, "dummy252", T0, T0, T0, T0 )
OPCODE(253, OP_DUMMY253, "dummy253", T0, T0, T0, T0 )
OPCODE(254, OP_DUMMY254, "dummy254", T0, T0, T0, T0 )
OPCODE(255, OP_DUMMY255, "dummy255", T0, T0, T0, T0 )
OPCODE(256, OP_DUMMY256, "dummy256", T0, T0, T0, T0 )
OPCODE(257, OP_DUMMY257, "dummy257", T0, T0, T0, T0 )
OPCODE(258, OP_COPY_I8I8, "copy_i8i8", Ti8, Ti8, T0, T0)
/* Should be the last opcode */
OPCODE(259, OP_END, NULL, T0, T0, T0, T0)
